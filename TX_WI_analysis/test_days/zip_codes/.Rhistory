pheatmap(
assay(rld)[lfcorder[1:30],] - rowMeans(assay(rld)[lfcorder[1:30],dds$population=="KC" & dds$dose=="control"]),
cluster_rows=TRUE,
show_rownames=TRUE,
cluster_cols=TRUE,
annotation_col=df
)
##############
# plot counts for individual genes
plotCounts(dds, gene=lfcorder[9], intgroup=c("population","dose"))
######################################################
# Get gene annotations using biomaRt
######################################################
##############################
# Select a mart and dataset
##############################
# ensembl host:
# most recent is "https://ensembl.org"
# to list archived version hosts: listEnsemblArchives()
ensemblhost <- "https://jul2022.archive.ensembl.org"
listMarts(host=ensemblhost)
# create an object for the Ensembl Genes v100 mart
mart <- useMart(biomart="ENSEMBL_MART_ENSEMBL", host=ensemblhost)
# occasionally ensembl will have connectivity issues. we can try an alternative function:
# select a mirror: 'www', 'uswest', 'useast', 'asia'
# mart <- useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL", mirror = "useast")
# see a list of datasets within the mart
# at the time of writing, there were 203
listDatasets(mart)
# figure out which dataset is the killifish
# be careful using grep like this. verify the match is what you want
searchDatasets(mart,pattern="Mummichog")
# there's only one match, get the name
killidata <- searchDatasets(mart,pattern="Mummichog")[,1]
# create an object for the killifish dataset
killi_mart <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = ensemblhost, dataset = killidata)
# if above there were connectivity issues and you used the alternative function then:
# select a mirror: 'www', 'uswest', 'useast', 'asia'
# killi_mart <- useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL", dataset = killidata, mirror = "useast")
#########################
# Query the mart/dataset
#########################
# filters, attributes and values
# see a list of all "filters" available for the mummichog dataset.
# at the time of writing, over 300
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_gene_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_gene_id","description","transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann <- group_by(ann, ensembl_gene_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_gene_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann1 <- cbind(res_shrink1,ann)
res_ann2 <- cbind(res_shrink2,ann)
res_ann3 <- cbind(res_shrink3,ann)
res_ann4 <- cbind(res_shrink4,ann)
######################################################
# Do a couple GO enrichment analyses
######################################################
# first use 'goseq', a bioconductor package
# goseq can automatically pull annotations for some organisms, but not F heteroclitus.
# we need to put together our own input data:
# a vector of 1/0 for each gene, indicating DE/not DE
# a vector of transcript lengths (the method tries to account for this source of bias)
# a table of gene ID to category IDs (in this case GO term IDs)
# 0/1 vector for DE/not DE
de <- as.numeric(res3$padj[!is.na(res3$padj)] < 0.1)
names(de) <- rownames(res3)[!is.na(res3$padj)]
# length of each gene
len <- ann[[3]][!is.na(res3$padj)]
# first try to account for transcript length bias by calculating the
# probability of being DE based purely on gene length
pwf <- nullp(DEgenes=de,bias.data=len)
# use the Wallenius approximation to calculate enrichment p-values
GO.wall <- goseq(pwf=pwf,gene2cat=go_ann[,c(1,3)])
# do FDR correction on p-values using Benjamini-Hochberg, add to output object
GO.wall <- cbind(
GO.wall,
padj_overrepresented=p.adjust(GO.wall$over_represented_pvalue, method="BH"),
padj_underrepresented=p.adjust(GO.wall$under_represented_pvalue, method="BH")
)
# explore the results
head(GO.wall)
# identify ensembl gene IDs annotated with to 2nd from top enriched GO term
g <- go_ann$go_id==GO.wall[2,1]
gids <- go_ann[g,1]
# inspect DE results for those genes
res_ann3[gids,] %>% data.frame()
# plot log2 fold changes for those genes, sorted
ord <- order(res_ann3[gids,]$log2FoldChange)
plot(res_ann3[gids,]$log2FoldChange[ord],
ylab="l2fc of genes in top enriched GO term",
col=(res_ann3[gids,]$padj[ord] < 0.1) + 1,
pch=20,cex=.5)
abline(h=0,lwd=2,lty=2,col="gray")
########################
# we can also run a similar analysis using the web platform gProfiler
# execute the following code, then copy the all ensembl gene IDs printed to the screen to your clipboard
cat(rownames(res3)[which(res3$padj < 0.1)])
# then visit biit.cs.ut.ee/gprofiler/gost
# select Laramichtys crocea as the organism
# paste the output into the query window and press "Run Query"
# if you explore the results, you'll see they are very similar.
######################################################
# Save some of the results to a table
######################################################
# set a prefix for output file names
outputPrefix <- "killifish_DESeq2"
# save data results and normalized reads to csv
#resdata <- merge(
#  as.data.frame(res_shrink),
#  as.data.frame(counts(dds,normalized =TRUE)),
#  by = 'row.names', sort = FALSE
#)
#names(resdata)[1] <- 'gene'
#write.csv(resdata, file = paste0(outputPrefix, "-results-with-normalized.csv"))
# send normalized counts to tab delimited file for GSEA, etc.
#write.table(
#as.data.frame(counts(dds),normalized=T),
#  file = paste0(outputPrefix, "_normalized_counts.txt"),
#  sep = '\t'
#)
GO.wall <- cbind(
GO.wall,
padj_overrepresented=p.adjust(GO.wall$over_represented_pvalue, method="BH"),
padj_underrepresented=p.adjust(GO.wall$under_represented_pvalue, method="BH")
)
# explore the results
head(GO.wall)
g <- go_ann$go_id==GO.wall[2,1]
gids <- go_ann[g,1]
res_ann3[gids,] %>% data.frame()
ord <- order(res_ann3[gids,]$log2FoldChange)
plot(res_ann3[gids,]$log2FoldChange[ord],
ylab="l2fc of genes in top enriched GO term",
col=(res_ann3[gids,]$padj[ord] < 0.1) + 1,
pch=20,cex=.5)
abline(h=0,lwd=2,lty=2,col="gray")
head(ord)
at(rownames(res3)[which(res3$padj < 0.1)])
cat(rownames(res3)[which(res3$padj < 0.1)])
GO.wall <- cbind(
GO.wall,
padj_overrepresented=p.adjust(GO.wall$over_represented_pvalue, method="BH"),
padj_underrepresented=p.adjust(GO.wall$under_represented_pvalue, method="BH")
)
# explore the results
head(GO.wall)
head(GO.wall)
ann <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_gene_id","description","transcript_length"),mart=killi_mart)
ann <- group_by(ann, ensembl_gene_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
go_ann <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_gene_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
View(go_ann)
View(ann)
res_ann1 <- cbind(res_shrink1,ann)
View(res_ann1)
View(res3)
summary(res3)
de <- as.numeric(res3$padj[!is.na(res3$padj)] < 0.1)
names(de) <- rownames(res3)[!is.na(res3$padj)]
len <- ann[[3]][!is.na(res3$padj)]
pwf <- nullp(DEgenes=de,bias.data=len)
GO.wall <- cbind(
GO.wall,
padj_overrepresented=p.adjust(GO.wall$over_represented_pvalue, method="BH"),
padj_underrepresented=p.adjust(GO.wall$under_represented_pvalue, method="BH")
)
# explore the results
head(GO.wall)
g <- go_ann$go_id==GO.wall[2,1]
gids <- go_ann[g,1]
res_ann3[gids,] %>% data.frame()
ord <- order(res_ann3[gids,]$log2FoldChange)
res_ann3[gids,] %>% data.frame()
g <- go_ann$go_id==GO.wall[2,1]
gids <- go_ann[g,1]
View(GO.wall)
GO.wall <- cbind(
GO.wall,
padj_overrepresented=p.adjust(GO.wall$over_represented_pvalue, method="BH"),
padj_underrepresented=p.adjust(GO.wall$under_represented_pvalue, method="BH")
)
# explore the results
head(GO.wall)
# identify ensembl gene IDs annotated with to 2nd from top enriched GO term
g <- go_ann$go_id==GO.wall[2,1]
gids <- go_ann[g,1]
# inspect DE results for those genes
res_ann3[gids,] %>% data.frame()
listAttributes(mart = killi_mart, page="feature_page")
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_peptide <- group_by(ann_peptide, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann3 <- cbind(res_shrink3,ann)
res_ann3_peptide <- cbind(res_shrink3,ann_peptide)
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_peptide <- group_by(ann_peptide, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann3_peptide <- cbind(res_shrink3,ann_peptide)
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_peptide <- group_by(ann_peptide, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_peptide <- getBM(filter="ensembl_peptide_id",value=rownames(res3),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann3 <- cbind(res_shrink3,ann)
listFilters(killi_mart)
listAttributes(mart = killi_mart, page="feature_page")
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_1 <- group_by(ann_1, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
go_ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
View(go_ann_1)
ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","transcript_length"),mart=killi_mart)
View(ann_1)
View(ann)
listFilters(killi_mart)
listAttributes(mart = killi_mart, page="feature_page")
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","ensembl_gene_id", "transcript_length"),mart=killi_mart)
View(ann_1)
ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","ensembl_gene_id", "transcript_length"),mart=killi_mart)
View(ann_1)
ann_1 <- group_by(ann_1, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
View(ann_1)
go_ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
View(go_ann_1)
go_ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
res_ann1_peptide <- cbind(res_shrink1,ann_1)
# plot log2 fold changes for those genes, sorted
ord <- order(res_ann3[gids,]$log2FoldChange)
plot(res_ann3[gids,]$log2FoldChange[ord],
ylab="l2fc of genes in top enriched GO term",
col=(res_ann3[gids,]$padj[ord] < 0.1) + 1,
pch=20,cex=.5)
abline(h=0,lwd=2,lty=2,col="gray")
# plot log2 fold changes for those genes, sorted
ord <- order(res_ann3[gids,]$log2FoldChange)
plot(res_ann3[gids,]$log2FoldChange[ord],
ylab="l2fc of genes in top enriched GO term",
col=(res_ann3[gids,]$padj[ord] < 0.1) + 1,
pch=20,cex=.5) + geom_point(size = 2)
abline(h=0,lwd=2,lty=2,col="gray")
# plot log2 fold changes for those genes, sorted
ord <- order(res_ann3[gids,]$log2FoldChange)
plot(res_ann3[gids,]$log2FoldChange[ord],
ylab="l2fc of genes in top enriched GO term",
col=(res_ann3[gids,]$padj[ord] < 0.1) + 1,
pch=20,cex=.5) + geom_point(size = 50)
abline(h=0,lwd=2,lty=2,col="gray")
dat <- plotPCA(vsd,returnData=TRUE,intgroup=c("population","dose"))
p <- ggplot(dat,aes(x=PC1,y=PC2,col=paste(population, dose)))
p <- p + geom_point() +
xlab(paste("PC1: ", round(attr(dat,"percentVar")[1],2)*100, "% variation explained", sep="")) +
ylab(paste("PC2: ", round(attr(dat,"percentVar")[2],2)*100, "% variation explained", sep="")) +
geom_label_repel(aes(label=name))
p
dat <- plotPCA(vsd,returnData=TRUE,intgroup=c("population","dose"))
p <- ggplot(dat,aes(x=PC1,y=PC2,col=paste(population, dose)))
p <- p + geom_point() +
xlab(paste("PC1: ", round(attr(dat,"percentVar")[1],2)*100, "% variation explained", sep="")) +
ylab(paste("PC2: ", round(attr(dat,"percentVar")[2],2)*100, "% variation explained", sep="")) +
geom_label_repel(aes(label=name)) +
geom_text(aes(position=position_dodge(width=0.9),hjust=1.5,colour="white") +
theme_bw()+theme(element_text(size=10))
p
dat <- plotPCA(vsd,returnData=TRUE,intgroup=c("population","dose"))
p <- ggplot(dat,aes(x=PC1,y=PC2,col=paste(population, dose)))
p <- p + geom_point() +
xlab(paste("PC1: ", round(attr(dat,"percentVar")[1],2)*100, "% variation explained", sep="")) +
ylab(paste("PC2: ", round(attr(dat,"percentVar")[2],2)*100, "% variation explained", sep="")) +
geom_label_repel(aes(label=name)) +
geom_text(aes(position=position_dodge(width=0.9),hjust=1.5,colour="white") +
theme_bw() +
theme(element_text(size=10))
p
dat <- plotPCA(vsd,returnData=TRUE,intgroup=c("population","dose"))
p <- ggplot(dat,aes(x=PC1,y=PC2,col=paste(population, dose)))
p <- p + geom_point() +
xlab(paste("PC1: ", round(attr(dat,"percentVar")[1],2)*100, "% variation explained", sep="")) +
ylab(paste("PC2: ", round(attr(dat,"percentVar")[2],2)*100, "% variation explained", sep="")) +
geom_label_repel(aes(label=name)) +
geom_text(aes(position=position_dodge(width=0.9),hjust=1.5,colour="white")
p
dat <- plotPCA(vsd,returnData=TRUE,intgroup=c("population","dose"))
p <- ggplot(dat,aes(x=PC1,y=PC2,col=paste(population, dose)))
p <- p + geom_point() +
xlab(paste("PC1: ", round(attr(dat,"percentVar")[1],2)*100, "% variation explained", sep="")) +
ylab(paste("PC2: ", round(attr(dat,"percentVar")[2],2)*100, "% variation explained", sep="")) +
geom_label_repel(aes(label=name))
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25) +
geom_abline(intercept=0,slope=1, color="gray")
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25) +
geom_abline(intercept=0,slope=1, color="gray") +
ggtitle("L2FC shrinkage with p values")
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25, alpha = .25) +
geom_abline(intercept=0,slope=1, color="gray") +
ggtitle("L2FC shrinkage with p values")
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25, alpha = .25) +
geom_abline(intercept=0,slope=1, color="gray") +
ggtitle("L2FC shrinkage with p values"(hjust = 0.5))
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25, alpha = .25) +
geom_abline(intercept=0,slope=1, color="gray") +
ggtitle("L2FC shrinkage with p values") +
theme(plot.title = element_text(hjust = 0.5))
data.frame(l2fc=res1$log2FoldChange, l2fc_shrink=res_shrink1$log2FoldChange, padj=res1$padj) %>%
filter(l2fc > -5 & l2fc < 5 & l2fc_shrink > -5 & l2fc_shrink < 5) %>%
ggplot(aes(x=l2fc, y=l2fc_shrink,color=padj > 0.1)) +
geom_point(size=.25, alpha = .2) +
geom_abline(intercept=0,slope=1, color="gray") +
ggtitle("L2FC shrinkage with p values") +
theme(plot.title = element_text(hjust = 0.5))
# filters, attributes and values
# see a list of all "filters" available for the mummichog dataset.
# at the time of writing, over 300
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","ensembl_gene_id", "transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_1 <- group_by(ann_1, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann1_peptide <- cbind(res_shrink1,ann_1)
# filters, attributes and values
# see a list of all "filters" available for the mummichog dataset.
# at the time of writing, over 300
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_1 <- getBM(filter="ensembl_peptide_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","ensembl_gene_id", "transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_1 <- group_by(ann_1, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann1_peptide <- cbind(res_shrink1,ann_1)
View(ann_1)
# filters, attributes and values
# see a list of all "filters" available for the mummichog dataset.
# at the time of writing, over 300
listFilters(killi_mart)
# see a list of all "attributes" available
# 129 available at the time of writing
listAttributes(mart = killi_mart, page="feature_page")
# we can also search the attributes and filters
searchAttributes(mart = killi_mart, pattern = "ensembl_peptide_id")
searchFilters(mart = killi_mart, pattern="ensembl")
# get gene names and transcript lengths when they exist
ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","ensembl_gene_id", "transcript_length"),mart=killi_mart)
# pick only the longest transcript for each gene ID
ann_1 <- group_by(ann_1, ensembl_peptide_id) %>%
summarize(.,description=unique(description),transcript_length=max(transcript_length)) %>%
as.data.frame()
# get GO term info
# each row is a single gene ID to GO ID mapping, so the table has many more rows than genes in the analysis
go_ann_1 <- getBM(filter="ensembl_gene_id",value=rownames(res1),attributes=c("ensembl_peptide_id","description","go_id","name_1006","namespace_1003"),mart=killi_mart)
# get KEGG info
# kegg_ann <- getBM(filter="ensembl_gene_id",value=rownames(res),attributes=c("ensembl_gene_id","description","kegg_enzyme"),mart=killi_mart)
# put results and annotation in the same table
res_ann1_peptide <- cbind(res_shrink1,ann_1)
install.packages("htmltools")
swd
pwd
cwd
install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("riem")
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse)
library(lubridate)
library(riem)
install.packages("ggmap")
library(ggmap)
geocode("06269", output = "all")
library(ggmap)
geocode("06269", output = "all")
install.packages("zipcodeR"
)
library(zipcodeR)
data(us_zip_codes)
data("zip_code_db")
force(zip_code_db)
data <- read.table("zip_code_db")
data ("zip_code_db")
force(zip_code_db)
force(zip_code_db)
View(zip_code_db)
data <- read.table(zip_code_db)
data <- read.table(zip_code_db, header = TRUE)
data <- read.csv(zip_code_db, header = TRUE)
data <- zip_code_db
View(data)
View(data)
data <- (zip_code_db$zipcode, zip_code_db$lat, zip_code_db$lng)
data <- ("zip_code_db$zipcode", "zip_code_db$lat", "zip_code_db$lng")
data <- zip_code_db[, c(zip_code_db$zipcode, zip_code_db$lat, zip_code_db$lng)]
data <- zip_code_db[, c("zipcode", "lat", "lng")]
View(data)
setwd("C:/Users/serpe/Zilla-Lab/TX_WI_analysis/test_days/zip_codes")
ls
system("ls")
system(ls)
test_data <- read.table("Test_zips.txt")
View(test_data)
Lat_lng_data <- merge(data, test_data, by.x = "zipcode", by.y = "V2")
View(Lat_lng_data)
